{"version":3,"sources":["assets/laravel.svg","assets/react.svg","assets/amazonaws.svg","assets/rocket.svg","assets/brain.svg","assets/hero.jpg","assets/github.svg","assets/linkedin.svg","components/Bold/index.tsx","scenes/Home/Styled.tsx","scenes/Home/index.tsx","components/Footer/Styled.tsx","components/Footer/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Bold","styled","strong","Hero","header","HeroImage","Title","div","AboutMeBlock","section","LargeTag","BlockImage","img","Stack","StackIcon","Home","src","LaravelLogo","alt","ReactLogo","AWSLogo","RocketImage","BrainImage","Wrapper","Footer","Date","getFullYear","href","target","rel","GitHubLogo","LinkedInLogo","GlobalStyles","createGlobalStyle","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,4PCE3C,IAIeC,EAJFC,IAAOC,OAAV,K,unDCCH,IAAMC,EAAOF,IAAOG,OAAV,IAGSC,KAMbC,EAAQL,IAAOM,IAAV,KA8BLC,EAAeP,IAAOQ,QAAV,KAiBZC,EAAWT,IAAOM,IAAV,KAORI,EAAaV,IAAOW,IAAV,KAOVC,EAAQZ,IAAOM,IAAV,KAMLO,EAAYb,IAAOW,IAAV,KCjBPG,MArDf,WACE,OACE,6BACE,kBAACZ,EAAD,KACE,kBAACG,EAAD,KACE,iDACA,mEAGJ,kBAACE,EAAD,KACE,6BACE,kBAACE,EAAD,aAEF,6BACE,4DACA,mJACA,qEACyC,kBAAC,EAAD,8CADzC,sDAC8I,kBAAC,EAAD,6BAD9I,KAGA,kBAACG,EAAD,KACE,kBAACC,EAAD,CAAWE,IAAKC,IAAaC,IAAI,YACjC,kBAACJ,EAAD,CAAWE,IAAKG,IAAWD,IAAI,UAC/B,kBAACJ,EAAD,CAAWE,IAAKI,IAASF,IAAI,WAInC,kBAACV,EAAD,KACE,6BACE,0DACA,2JACA,0MAEF,6BACE,kBAACG,EAAD,CAAYK,IAAKK,IAAaH,IAAI,aAGtC,kBAACV,EAAD,KACE,6BACE,kBAACG,EAAD,CAAYK,IAAKM,IAAYJ,IAAI,WAEnC,6BACE,yDACA,kIACA,uO,+RClDH,IAAMK,EAAUtB,IAAOQ,QAAV,K,kCCsBLe,MAnBf,WACE,OACE,kBAACD,EAAD,KACE,qDAA4B,IAAIE,MAAOC,eACvC,2BACE,uBAAGC,KAAK,mDAAmDC,OAAO,SAASC,IAAI,uBAC7E,yBAAKb,IAAKc,IAAYZ,IAAI,eAE5B,uBAAGS,KAAK,+CAA+CC,OAAO,SAASC,IAAI,uBACzE,yBAAKb,IAAKe,IAAcb,IAAI,kBAGhC,2BACE,sF,oYCbR,IAAMc,EAAeC,YAAH,KA+BHC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACH,EAAD,MAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCnBcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.55514a3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/laravel.56729c66.svg\";","module.exports = __webpack_public_path__ + \"static/media/react.092e0882.svg\";","module.exports = __webpack_public_path__ + \"static/media/amazonaws.df9d1a62.svg\";","module.exports = __webpack_public_path__ + \"static/media/rocket.475c6737.svg\";","module.exports = __webpack_public_path__ + \"static/media/brain.e47bde8a.svg\";","module.exports = __webpack_public_path__ + \"static/media/hero.a798374f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/github.7019b9b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.7bea0cf8.svg\";","import styled from 'styled-components';\n\nconst Bold = styled.strong`\n  color: rgba(0, 0, 0, 0.8);\n`;\n\nexport default Bold;\n","import styled from 'styled-components';\nimport HeroImage from 'assets/hero.jpg';\n\nexport const Hero = styled.header`\n  min-width: 100vw;\n  min-height: 100vh;\n  background-image: url(${HeroImage});\n  background-position: 50% 0;\n  background-size: cover;\n  position: relative;\n`;\n\nexport const Title = styled.div`\n  position: absolute;\n  top: 50%;\n  width: 100%;\n  transform: translateY(-50%);\n\n  padding: 2rem;\n  text-align: center;\n  background-color: rgba(0, 0, 0, 0.3);\n\n  h1 {\n    font-size: 3rem;\n    margin: 0;\n    color: #fff;\n    font-weight: 300;\n  }\n\n  h2 {\n    font-size: 1rem;\n    margin: 0;\n    line-height: 1.5;\n    color: #fff;\n    font-weight: 300;\n  }\n\n  small {\n    display: block;\n  }\n`;\n\nexport const AboutMeBlock = styled.section`\n  min-height: 50vh;\n  display: flex;\n  align-items: center;\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 1rem 0;\n\n  > div {\n    flex: 1 1 0;\n  }\n\n  p {\n    line-height: 1.5;\n  }\n`;\n\nexport const LargeTag = styled.div`\n  text-align: center;\n  color: rgba(0, 0, 0, 0.6);\n  font-size: 8rem;\n  letter-spacing: -1.5rem;\n`;\n\nexport const BlockImage = styled.img`\n  display: block;\n  margin: 0 auto;\n  height: 15rem;\n  opacity: 0.6;\n`;\n\nexport const Stack = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nexport const StackIcon = styled.img`\n  height: 2rem;\n  margin-left: 0.5rem;\n`;\n","import React from 'react';\nimport Bold from 'components/Bold';\nimport LaravelLogo from 'assets/laravel.svg';\nimport ReactLogo from 'assets/react.svg';\nimport AWSLogo from 'assets/amazonaws.svg';\nimport RocketImage from 'assets/rocket.svg';\nimport BrainImage from 'assets/brain.svg';\nimport { Hero, Title, AboutMeBlock, LargeTag, BlockImage, Stack, StackIcon } from './Styled';\n\nfunction Home(): JSX.Element {\n  return (\n    <div>\n      <Hero>\n        <Title>\n          <h1>Hi, I am Gabriel.</h1>\n          <h2>I do code and other techy things.</h2>\n        </Title>\n      </Hero>\n      <AboutMeBlock>\n        <div>\n          <LargeTag>&lt;/&gt;</LargeTag>\n        </div>\n        <div>\n          <h2>A decade and a half of code.</h2>\n          <p>I started my professional carrer back in 2005, dig into web development in 2007 and went through a lot of buzzwords.</p>\n          <p>\n            Currently, my latest skillset includes <Bold>React, React Native, Laravel, and AWS</Bold>. Industry usually considers that a combination of <Bold>Fullstack and DevOps</Bold>.\n          </p>\n          <Stack>\n            <StackIcon src={LaravelLogo} alt=\"Laravel\" />\n            <StackIcon src={ReactLogo} alt=\"React\" />\n            <StackIcon src={AWSLogo} alt=\"AWS\" />\n          </Stack>\n        </div>\n      </AboutMeBlock>\n      <AboutMeBlock>\n        <div>\n          <h2>A tech-minded entepreneur.</h2>\n          <p>Or the way I like seeing it: I found nice people along the way to work with and build interesting stuff, doing what we love.</p>\n          <p>As part this journey had the luck to work with and for people all around the world since 2010. We learn, fail and succeeded in many ways. And most important, enjoying it.</p>\n        </div>\n        <div>\n          <BlockImage src={RocketImage} alt=\"Rocket\" />\n        </div>\n      </AboutMeBlock>\n      <AboutMeBlock>\n        <div>\n          <BlockImage src={BrainImage} alt=\"Brain\" />\n        </div>\n        <div>\n          <h2>A learner and a lecturer.</h2>\n          <p>We would not achieve anything just by ourselves, we grow only when people around us do it was well.</p>\n          <p>\n            For over six years I have been teaching Databases I in schools, and a bit more coaching trainees and juniors in working environments. I like thinking I got a great deal of soft skills\n            though that.\n          </p>\n        </div>\n      </AboutMeBlock>\n    </div>\n  );\n}\n\nexport default Home;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.section`\n  padding: 3rem 1rem;\n  background: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  text-align: center;\n\n  a + a {\n    margin-left: 1rem;\n  }\n\n  img {\n    width: 2rem;\n  }\n\n  small {\n    font-size: 0.65rem;\n  }\n`;\n","import React from 'react';\nimport { Wrapper } from './Styled';\nimport GitHubLogo from 'assets/github.svg';\nimport LinkedInLogo from 'assets/linkedin.svg';\n\nfunction Footer(): JSX.Element {\n  return (\n    <Wrapper>\n      <p>Gabriel Brunacci &copy; {new Date().getFullYear()}</p>\n      <p>\n        <a href=\"https://github.com/gbrunacci/gbrunacci.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={GitHubLogo} alt=\"This Repo\" />\n        </a>\n        <a href=\"https://www.linkedin.com/in/gabrielbrunacci/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={LinkedInLogo} alt=\"My LinkedIn\" />\n        </a>\n      </p>\n      <p>\n        <small>Or drop me a line at gbrunacci @ (gmail account)</small>\n      </p>\n    </Wrapper>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport Home from './scenes/Home';\nimport Footer from 'components/Footer';\n\nconst GlobalStyles = createGlobalStyle`\n  html {\n      box-sizing: border-box;\n  }\n\n  *, *:before, *:after {\n      box-sizing: inherit;\n  }\n\n  body {\n      font-family: 'Spartan', sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      font-size: 16px;\n      margin: 0;\n      padding: 0;\n\n  }\n`;\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"App\">\n      <GlobalStyles />\n      {/* Well, we don't have too many routes yes, don't we? */}\n      <Home />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}